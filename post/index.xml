<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Charlie&#39;s Blog</title>
        <link>https://charlieUWUuwu.github.io/post/</link>
        <description>Recent content in Posts on Charlie&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Charlie</copyright>
        <lastBuildDate>Sat, 22 Feb 2025 20:47:34 +0800</lastBuildDate><atom:link href="https://charlieUWUuwu.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>建立完整 React 專案</title>
        <link>https://charlieUWUuwu.github.io/p/%E5%BB%BA%E7%AB%8B%E5%AE%8C%E6%95%B4-react-%E5%B0%88%E6%A1%88/</link>
        <pubDate>Sat, 22 Feb 2025 20:47:34 +0800</pubDate>
        
        <guid>https://charlieUWUuwu.github.io/p/%E5%BB%BA%E7%AB%8B%E5%AE%8C%E6%95%B4-react-%E5%B0%88%E6%A1%88/</guid>
        <description>&lt;p&gt;以下紀錄使用 &lt;code&gt;vite&lt;/code&gt; 建立專案，設置 &lt;code&gt;Tailewind CSS&lt;/code&gt;，並搭配 &lt;code&gt;Eslint&lt;/code&gt; + &lt;code&gt;Prettier&lt;/code&gt; 作風格控制的步驟。&lt;/p&gt;
&lt;h2 id=&#34;安裝&#34;&gt;
    &lt;a href=&#34;#%e5%ae%89%e8%a3%9d&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    安裝
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;去官網自行下載安裝
&lt;ul&gt;
&lt;li&gt;VS Code&lt;/li&gt;
&lt;li&gt;Nodejs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VSCode 外掛安裝建議
&lt;ul&gt;
&lt;li&gt;ES7+ React/Redux/React-Native snippets&lt;/li&gt;
&lt;li&gt;VSCode React Refactor&lt;/li&gt;
&lt;li&gt;EditorConfig&lt;/li&gt;
&lt;li&gt;ESLint&lt;/li&gt;
&lt;li&gt;Prettier - Code formatter&lt;/li&gt;
&lt;li&gt;Prettier ESLint&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本架構說明&#34;&gt;
    &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e6%9e%b6%e6%a7%8b%e8%aa%aa%e6%98%8e&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    基本架構說明
&lt;/h2&gt;&lt;p&gt;當你使用 Vite 建立 React 專案時，預設的專案結構大致如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;my-project/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── node_modules/      # 安裝的 npm 套件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── public/            # 公開資源（不經過 Vite 處理）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── favicon.svg    # 網站圖示
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── src/               # 主要程式碼（React 相關）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── assets/        # 靜態資源（如圖片、CSS）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── components/    # 可重用的 React 元件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── pages/         # 分頁（通常使用 React Router）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── App.jsx        # 主應用程式組件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── main.jsx       # React 進入點
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── index.css      # 全域樣式
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── .gitignore         # Git 忽略的檔案
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── index.html         # 主 HTML 模板
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── package.json       # 專案資訊 &amp;amp; 依賴管理
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── vite.config.js     # Vite 設定檔
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── README.md          # 專案說明文件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;詳細介紹&#34;&gt;
    &lt;a href=&#34;#%e8%a9%b3%e7%b4%b0%e4%bb%8b%e7%b4%b9&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    &lt;strong&gt;詳細介紹&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;public&#34;&gt;
    &lt;a href=&#34;#public&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    &lt;strong&gt;&lt;code&gt;public/&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;放置不需要經 Vite 轉譯的靜態資源，例如 &lt;code&gt;favicon.ico&lt;/code&gt;、圖片或外部 JS 檔案。&lt;/li&gt;
&lt;li&gt;這裡的文件會原封不動地被拷貝到 &lt;code&gt;dist/&lt;/code&gt;，可直接用 &lt;code&gt;/assets/image.png&lt;/code&gt; 來存取。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;src&#34;&gt;
    &lt;a href=&#34;#src&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    &lt;strong&gt;&lt;code&gt;src/&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;（主要開發目錄）
&lt;strong&gt;(1) &lt;code&gt;assets/&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存放靜態資源，如圖片、CSS、SVG 等，但會被 Vite 處理，可透過 &lt;code&gt;import&lt;/code&gt; 使用：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;../assets/logo.png&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(2) &lt;code&gt;components/&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存放可重複使用的 React 元件，例如：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// src/components/Button.jsx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Button&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(3) &lt;code&gt;pages/&lt;/code&gt;（可選）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若使用 React Router，通常會將每個頁面拆成獨立的 &lt;code&gt;page&lt;/code&gt; 元件：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// src/pages/Home.jsx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Home&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Home&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Home&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(4) &lt;code&gt;App.jsx&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React 應用的主要組件，通常負責路由和全局狀態：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;BrowserRouter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Routes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;react-router-dom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Home&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;./pages/Home&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;About&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;./pages/About&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;App&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;BrowserRouter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Route&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Home&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Route&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/about&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;About&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;BrowserRouter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;App&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(5) &lt;code&gt;main.jsx&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React 應用的入口點，將 &lt;code&gt;App.jsx&lt;/code&gt; 掛載到 &lt;code&gt;index.html&lt;/code&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ReactDOM&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;react-dom/client&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;./App&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;./index.css&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;ReactDOM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createRoot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;React.StrictMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;React.StrictMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;indexhtml&#34;&gt;
    &lt;a href=&#34;#indexhtml&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    &lt;strong&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Vite 預設的 HTML 樣板，&lt;code&gt;#root&lt;/code&gt; 是 React 掛載的地方：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/src/main.jsx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;viteconfigjs&#34;&gt;
    &lt;a href=&#34;#viteconfigjs&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    &lt;strong&gt;&lt;code&gt;vite.config.js&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Vite 的設定檔，可以修改開發伺服器、路徑別名、環境變數等：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;defineConfig&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vite&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;react&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;@vitejs/plugin-react&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;defineConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;react&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 指定開發伺服器埠號
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;補充專案進階架構&#34;&gt;
    &lt;a href=&#34;#%e8%a3%9c%e5%85%85%e5%b0%88%e6%a1%88%e9%80%b2%e9%9a%8e%e6%9e%b6%e6%a7%8b&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    &lt;strong&gt;補充：專案進階架構&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;若是較大型的專案，通常會進一步拆分目錄：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;my-project/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── src/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── api/            # API 請求函式
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── hooks/          # 自訂 Hooks
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── context/        # React Context 狀態管理
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── store/          # Redux 或 Zustand 狀態管理
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── utils/          # 工具函式
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── styles/         # SCSS / Tailwind / CSS
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;建立本地項目&#34;&gt;
    &lt;a href=&#34;#%e5%bb%ba%e7%ab%8b%e6%9c%ac%e5%9c%b0%e9%a0%85%e7%9b%ae&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    建立本地項目
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm create vite@latest my-project1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cd my-project1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm run dev           # 啟動開發預覽 server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;設置-tailwind-css&#34;&gt;
    &lt;a href=&#34;#%e8%a8%ad%e7%bd%ae-tailwind-css&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    設置 Tailwind CSS
&lt;/h2&gt;&lt;p&gt;安裝步驟直接看官網: &lt;a class=&#34;link&#34; href=&#34;https://tailwindcss.com/docs/installation/using-vite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://tailwindcss.com/docs/installation/using-vite&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;基本格式規範縮排行尾符號等&#34;&gt;
    &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e6%a0%bc%e5%bc%8f%e8%a6%8f%e7%af%84%e7%b8%ae%e6%8e%92%e8%a1%8c%e5%b0%be%e7%ac%a6%e8%99%9f%e7%ad%89&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    基本格式規範（縮排、行尾符號等）
&lt;/h2&gt;&lt;p&gt;建立 &lt;code&gt;.editorconfig&lt;/code&gt; 檔案，並輸入以下內容(&lt;a class=&#34;link&#34; href=&#34;https://github.com/facebook/react/blob/main/.editorconfig&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;來源為 fb&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# https://editorconfig.org
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root = true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[*]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;charset = utf-8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;end_of_line = lf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;indent_size = 2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;indent_style = space
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;insert_final_newline = true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;max_line_length = 80
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[*.md]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;max_line_length = 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[COMMIT_EDITMSG]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;max_line_length = 0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基礎設置到此就可以了，以下為進階選項&lt;/p&gt;
&lt;h2 id=&#34;排版檢查&#34;&gt;
    &lt;a href=&#34;#%e6%8e%92%e7%89%88%e6%aa%a2%e6%9f%a5&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    排版檢查
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm i eslint            // 安裝
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm init @eslint/config // 設定eslint
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eslint.config.js&lt;/code&gt; 設置成如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;globals&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;globals&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pluginJs&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;@eslint/js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tseslint&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;typescript-eslint&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pluginReact&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;eslint-plugin-react&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reactRecommended&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;eslint-plugin-react/configs/recommended.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/** @type {import(&amp;#39;eslint&amp;#39;).Linter.Config[]} */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// https://stackoverflow.com/questions/72780296/warning-react-version-not-specified-in-eslint-plugin-react-settings-while-run
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;**/*.{js,mjs,cjs,ts,jsx,tsx}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;ignores&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;dist/**/*&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reactRecommended&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;react&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;nx&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;detect&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;pluginJs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;recommended&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tseslint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;recommended&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;pluginReact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;recommended&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;languageOptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;globals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;globals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;browser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;globals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;es2021&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;globals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;// https://coreui.io/blog/how-to-fix-react-must-be-in-scope-when-using-jsx/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;s1&#34;&gt;&amp;#39;react/react-in-jsx-scope&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;off&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 避免 {} 才視為一組
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;s1&#34;&gt;&amp;#39;react/jsx-uses-react&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;off&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;package.json&lt;/code&gt; 中添加檢查指令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;lint&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;eslint . --ext .vue,.js,.ts,.jsx,.tsx --fix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接著執行以下指令就可以進行版面檢查&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm run lint
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;自動化排版&#34;&gt;
    &lt;a href=&#34;#%e8%87%aa%e5%8b%95%e5%8c%96%e6%8e%92%e7%89%88&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    自動化排版
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm i prettier -D
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm i eslint-config-prettier -D
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm i eslint-plugin-prettier -D
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在根目錄新增 &lt;code&gt;.prettierrc&lt;/code&gt;，內容如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;printWidth&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;tabWidth&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;useTabs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;semi&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;singleQuote&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;quoteProps&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;as-needed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;jsxSingleQuote&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;trailingComma&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;bracketSpacing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;bracketSameLine&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;arrowParens&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;always&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;requirePragma&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;insertPragma&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;proseWrap&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;preserve&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;htmlWhitespaceSensitivity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;css&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;vueIndentScriptAndStyle&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;endOfLine&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;lf&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;eslint.config.js&lt;/code&gt; 添加以下內容，設定繼承順序&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// ...,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;eslint:recommended&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;plugin:@typescript-eslint/recommended&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;plugin:prettier/recommended&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;prettier&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;package.json&lt;/code&gt; 中添加格式化設定&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;#34;format&amp;#34;: &amp;#34;prettier --write \&amp;#34;./**/*.{html,vue,ts,tsx,js,json,md}\&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;只要執行以下指令就可以自動排版&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm run format
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;存檔時自動排版&#34;&gt;
    &lt;a href=&#34;#%e5%ad%98%e6%aa%94%e6%99%82%e8%87%aa%e5%8b%95%e6%8e%92%e7%89%88&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    存檔時自動排版
&lt;/h2&gt;&lt;p&gt;透過設定 VS Code setting，只要執行 &lt;code&gt;ctrl+s&lt;/code&gt;時就觸發自動排版!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打開 &lt;code&gt;setting.json&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;左下角齒輪 &amp;gt; Settings &amp;gt; 有全域的&lt;code&gt;User&lt;/code&gt;跟專案範圍的&lt;code&gt;Workspace&lt;/code&gt;可以選，選擇要的那個，往右上看有個文件上面有返回箭頭的符號，點擊!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;添加設置如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &amp;#34;editor.formatOnSave&amp;#34;: true, //存檔時自動格式化
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &amp;#34;editor.defaultFormatter&amp;#34;: &amp;#34;rvest.vs-code-prettier-eslint&amp;#34;, // 解析規則
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &amp;#34;editor.formatOnSaveMode&amp;#34;: &amp;#34;file&amp;#34;, // 格式化範圍
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Docker Networks</title>
        <link>https://charlieUWUuwu.github.io/p/docker-networks/</link>
        <pubDate>Thu, 24 Oct 2024 18:36:55 +0800</pubDate>
        
        <guid>https://charlieUWUuwu.github.io/p/docker-networks/</guid>
        <description>&lt;h2 id=&#34;docker-networks-defaults&#34;&gt;
    &lt;a href=&#34;#docker-networks-defaults&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Docker Networks Defaults
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每個 container 連接到 private virtual network &amp;ldquo;bridge(or docker0)&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每個虛擬網路實際上都通過 NAT firewall 路由出去到 Internet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在虛擬網路的這些 containers 其實可以不需要用 -p 暴露給 Internet 也可以互相溝通&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以為他們搭建一個網路&lt;/li&gt;
&lt;li&gt;也可以跳過現成的虛擬網路配置 (使用&lt;code&gt;--net=host&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker container inspect --format &amp;quot;{{ .NetworkSettings.IPAddress }}&amp;quot; webhost&lt;/code&gt;: 輸出容器 webhost 的 ip&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三種 driver 類型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--network bridge&lt;/code&gt;: Default Docker virtual netowrk, which is NAT&amp;rsquo;ed behind the Host IP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;讓在同樣 host 的容器可以互相溝通&lt;/li&gt;
&lt;li&gt;可以用&lt;code&gt;--link&lt;/code&gt;手動連接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--network host&lt;/code&gt;: It gains performance by skipping virtual networks but &lt;strong&gt;sacrifices security of container model&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也就是直接將容器連接到主機接口，可以提高高吞吐量網路的性能，但喪失了容器化的安全邊界&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--network none&lt;/code&gt;: removes eth0 and only leaves you with localhost interface in container&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相當於電腦上有個接口，但沒有連接到任何東西，我們可以自己創建連接&lt;/li&gt;
&lt;li&gt;其實在創建 container 時直接指定自建的網路就好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個 container 可以接到多個網路&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cli-management&#34;&gt;
    &lt;a href=&#34;#cli-management&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    CLI Management
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker network ls&lt;/code&gt; : Show networks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker network inspect&lt;/code&gt;: Inspect a network
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker network inspect bridge&lt;/code&gt;: 看 bridge 網路的內容(可以看到使用該網路的 container)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker network create &amp;lt;名字&amp;gt;&lt;/code&gt;: Create a network&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker network connect &amp;lt;network_ID&amp;gt; &amp;lt;container_ID&amp;gt;&lt;/code&gt;: Attach a network to container
&lt;ul&gt;
&lt;li&gt;這樣現有的容器可以不用停止運行，就接上指定網路&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker netowrk disconnect &amp;lt;container_ID&amp;gt; &amp;lt;network_ID&amp;gt;&lt;/code&gt;: Detach a network from container&lt;/li&gt;
&lt;li&gt;network driver : Built-in or 3rd party extensions that give you virtual network features
&lt;ul&gt;
&lt;li&gt;是個簡單的驅動程式，可以在本地創建一個虛擬網路&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;example&#34;&gt;
    &lt;a href=&#34;#example&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Example
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在建立時就連接網路
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker container run -d --name new_nginx --network my_app_net nginx&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;接著執行 inspect network my_app_net 就可以看到有 new_nginx 了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;將現有的容器接上網路
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker network connect &amp;lt;network_id&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dns&#34;&gt;
    &lt;a href=&#34;#dns&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    DNS
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Docker DNS : Docker deamon 有內建的 DNS server，容器預設是使用這個&lt;/li&gt;
&lt;li&gt;bridge 預設沒有 DNS，不過可以用&lt;code&gt;--link&lt;/code&gt;手動連接
&lt;ul&gt;
&lt;li&gt;但還是建議直接建一個新網路會更容易，或在未來使用 docker compose&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重要概念
&lt;ul&gt;
&lt;li&gt;Containers 不應該透過 IP 來做 inter-communication&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Docker 基礎指令</title>
        <link>https://charlieUWUuwu.github.io/p/docker-%E5%9F%BA%E7%A4%8E%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Thu, 24 Oct 2024 16:39:51 +0800</pubDate>
        
        <guid>https://charlieUWUuwu.github.io/p/docker-%E5%9F%BA%E7%A4%8E%E6%8C%87%E4%BB%A4/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ps aux&lt;/code&gt;: show me all running processes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps aux | grep mongo&lt;/code&gt;: 過濾出叫做 mongo 的 process&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;startrun-a-container&#34;&gt;
    &lt;a href=&#34;#startrun-a-container&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Start/Run a Container
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker pull &amp;lt;image_name&amp;gt;&lt;/code&gt;: pull an image from docker hub by default&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;doker run --name mymongo -d mongo&lt;/code&gt;: 執行一個新的 container (每次都會建置新的)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker start mongo&lt;/code&gt; : 啟動名為 mongo 的 container&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker stop mongo&lt;/code&gt;: stop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--env(or -e)&lt;/code&gt;: 傳遞環境參數到 container 中。例如運行&lt;code&gt;mysql&lt;/code&gt;時常用&lt;code&gt;MYSQL_RANDOM_ROOT_PASSWORD=yes&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可在第一次啟動時使用&lt;code&gt;docker container logs&lt;/code&gt;指令到日誌中查找隨機密碼是什麼。&lt;/li&gt;
&lt;li&gt;在 docker hub 上會看到 mysql 有說密碼要指定三個選項的其中一個。&lt;/li&gt;
&lt;li&gt;官方 mysql image 已經移除 &lt;code&gt;ps&lt;/code&gt;跟&lt;code&gt;apt-get&lt;/code&gt;指令。可以改用 MariaDB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;whats-going-on-in-conatainers&#34;&gt;
    &lt;a href=&#34;#whats-going-on-in-conatainers&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What&amp;rsquo;s Going On In Conatainers
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker container top &amp;lt;container_ID&amp;gt;&lt;/code&gt;: list running processes in specific container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doker run --name mymongo -d mongo&lt;/code&gt;: 執行一個新的 container (每次都會建置新的)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container inspect&lt;/code&gt; : show metadata about the container(startup config, columes, networking, etc)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container stats&lt;/code&gt; : show live performance data for all containers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;getting-a-shell-inside-containers&#34;&gt;
    &lt;a href=&#34;#getting-a-shell-inside-containers&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Getting a Shell Inside Containers
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker container run -it&lt;/code&gt;: start new container interactively&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker container exec -it&lt;/code&gt; : run &lt;strong&gt;additional command&lt;/strong&gt; in &lt;strong&gt;existing container&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exec 是在現有的運行容器上運行一個附加的 process，所以不會影響 deamon program 的 root process&lt;/li&gt;
&lt;li&gt;exec 適合用在&lt;code&gt;故障排除, 稍微更改內容&lt;/code&gt;的情景，可以跳轉到 container 裡面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-t, --tty&lt;/code&gt;: pseudo-tty, similates a real terminal, like what SSH does&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-i&lt;/code&gt;: interactive. Keep session open to receive terminal input&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bash/sh&lt;/code&gt;: if run with -it, it will give you a terminal inside the running container&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用法 : &lt;code&gt;docker container run -it --name proxy nginx bash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;sh 更加輕巧，像是 Apline linux 只有 sh 而沒有 bash&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;others&#34;&gt;
    &lt;a href=&#34;#others&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Others
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--format&lt;/code&gt;: A common option for formatting the output of commands using &amp;ldquo;Go templates&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;例如&lt;code&gt;docker container inspect --format &amp;quot;{{ .NetworkSettings.IPAddress }}&amp;quot; webhost&lt;/code&gt;，注意 Windows 的話要使用雙引號而非單引號&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps aux&lt;/code&gt;: show me all running processes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps aux | grep mongo&lt;/code&gt;: 過濾出叫做 mongo 的 process&lt;/li&gt;
&lt;li&gt;Apline Linux : 只有 5MB 的 Linux 的另一個發行版&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>React 基礎指令</title>
        <link>https://charlieUWUuwu.github.io/p/react-%E5%9F%BA%E7%A4%8E%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Sat, 06 Jul 2024 20:33:33 +0800</pubDate>
        
        <guid>https://charlieUWUuwu.github.io/p/react-%E5%9F%BA%E7%A4%8E%E6%8C%87%E4%BB%A4/</guid>
        <description>&lt;h1 id=&#34;操作指令&#34;&gt;
    &lt;a href=&#34;#%e6%93%8d%e4%bd%9c%e6%8c%87%e4%bb%a4&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    操作指令
&lt;/h1&gt;&lt;h2 id=&#34;建立本地項目&#34;&gt;
    &lt;a href=&#34;#%e5%bb%ba%e7%ab%8b%e6%9c%ac%e5%9c%b0%e9%a0%85%e7%9b%ae&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    建立本地項目
&lt;/h2&gt;&lt;h3 id=&#34;使用-vite&#34;&gt;
    &lt;a href=&#34;#%e4%bd%bf%e7%94%a8-vite&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    使用 Vite
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm create vite@latest my-project1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm create vite
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用-create-react-app&#34;&gt;
    &lt;a href=&#34;#%e4%bd%bf%e7%94%a8-create-react-app&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    使用 create-react-app
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npx create-react-app 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;進入專案資料夾&#34;&gt;
    &lt;a href=&#34;#%e9%80%b2%e5%85%a5%e5%b0%88%e6%a1%88%e8%b3%87%e6%96%99%e5%a4%be&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    進入專案資料夾
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cd my-project1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;安裝額外包如react&#34;&gt;
    &lt;a href=&#34;#%e5%ae%89%e8%a3%9d%e9%a1%8d%e5%a4%96%e5%8c%85%e5%a6%82react&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    安裝額外包(如React)
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;啟動開發預覽-server&#34;&gt;
    &lt;a href=&#34;#%e5%95%9f%e5%8b%95%e9%96%8b%e7%99%bc%e9%a0%90%e8%a6%bd-server&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    啟動開發預覽 server
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm run dev   # vite
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm start     # create-react-app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;udemy-教材啟用起手式&#34;&gt;
    &lt;a href=&#34;#udemy-%e6%95%99%e6%9d%90%e5%95%9f%e7%94%a8%e8%b5%b7%e6%89%8b%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Udemy 教材啟用起手式
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm run dev
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用-redux&#34;&gt;
    &lt;a href=&#34;#%e4%bd%bf%e7%94%a8-redux&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    使用 redux
&lt;/h2&gt;&lt;h3 id=&#34;安裝工具箱&#34;&gt;
    &lt;a href=&#34;#%e5%ae%89%e8%a3%9d%e5%b7%a5%e5%85%b7%e7%ae%b1&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    安裝工具箱
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;react&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;redux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduxjs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toolkit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安裝開發工具&#34;&gt;
    &lt;a href=&#34;#%e5%ae%89%e8%a3%9d%e9%96%8b%e7%99%bc%e5%b7%a5%e5%85%b7&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    安裝開發工具
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Google&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;搜尋&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Redux&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;devtool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Github 基礎指令</title>
        <link>https://charlieUWUuwu.github.io/p/github-%E5%9F%BA%E7%A4%8E%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Mon, 03 Jun 2024 21:46:25 +0800</pubDate>
        
        <guid>https://charlieUWUuwu.github.io/p/github-%E5%9F%BA%E7%A4%8E%E6%8C%87%E4%BB%A4/</guid>
        <description>&lt;h1 id=&#34;github-基礎指令&#34;&gt;
    &lt;a href=&#34;#github-%e5%9f%ba%e7%a4%8e%e6%8c%87%e4%bb%a4&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Github 基礎指令
&lt;/h1&gt;&lt;h2 id=&#34;下載-git&#34;&gt;
    &lt;a href=&#34;#%e4%b8%8b%e8%bc%89-git&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    下載 git
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 確認有安裝 git&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git --version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ./專案所在資料夾
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;初次使用-使用者設定&#34;&gt;
    &lt;a href=&#34;#%e5%88%9d%e6%ac%a1%e4%bd%bf%e7%94%a8-%e4%bd%bf%e7%94%a8%e8%80%85%e8%a8%ad%e5%ae%9a&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    初次使用 使用者設定
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git config --global user.name &lt;span class=&#34;s2&#34;&gt;&amp;#34;YOUR_NAME&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git config --global user.email &lt;span class=&#34;s2&#34;&gt;&amp;#34;YOUR_EMAIL&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;查看使用者訊息&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git config --list
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user.name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;YOUR_NAME
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user.email&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;YOUR_EMAIL
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;git-使用&#34;&gt;
    &lt;a href=&#34;#git-%e4%bd%bf%e7%94%a8&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Git 使用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;初始 Repository&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;觀察 Repository 檔案追蹤狀況&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;將檔案加入暫存區(Staging Area)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 添加一份檔案&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git add welcome.html
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 添加所有檔案&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 再次檢查&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;查看暫存區資料&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git ls-files
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;git add 反悔 (清除暫存區檔案)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git reset HEAD -- &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;路徑&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;將暫存區(Staging Area)檔案提交到倉庫(Repository)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;提交訊息紀錄&amp;#34;&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;# -m 表示直接在命令行中提供提交訊息，後面的 &amp;#34;init commit&amp;#34; 是具體的提交訊息內容。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;commit 反悔&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git rm -r --cached &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;路徑&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;分支-branch&#34;&gt;
    &lt;a href=&#34;#%e5%88%86%e6%94%af-branch&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    分支 branch
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;印出目前這個專案有哪些分支&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;新增+切換分支&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;法 1
&lt;ul&gt;
&lt;li&gt;新增分支
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch &amp;lt;分支名&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 執行結束過後，目前還是會在 master 的主要分支上。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;切換分支&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git checkout cat
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Switched to branch &lt;span class=&#34;s1&#34;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 切換分支，若不存在分支就創建一個&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git checkout -b sister
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Switched to a new branch &lt;span class=&#34;s1&#34;&gt;&amp;#39;sister&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;法 2
&lt;ul&gt;
&lt;li&gt;新建分支並切換過去&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git checkout -b &amp;lt;分支名&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分支改名字&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch -m cat tiger  &lt;span class=&#34;c1&#34;&gt;# cat -&amp;gt; tiger&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;合併分支&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 切回主要分支&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git checkout master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Switched to branch &lt;span class=&#34;s1&#34;&gt;&amp;#39;master&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 將分支 cat 合併到 master&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git merge cat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;✨: 合併過的分支不會消失，要不要留著取決於自己~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;刪除分支&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch -d cat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;github-使用&#34;&gt;
    &lt;a href=&#34;#github-%e4%bd%bf%e7%94%a8&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    GitHub 使用
&lt;/h2&gt;&lt;h3 id=&#34;開始前可以先檢測目前與-github-的-ssh-連線狀況&#34;&gt;
    &lt;a href=&#34;#%e9%96%8b%e5%a7%8b%e5%89%8d%e5%8f%af%e4%bb%a5%e5%85%88%e6%aa%a2%e6%b8%ac%e7%9b%ae%e5%89%8d%e8%88%87-github-%e7%9a%84-ssh-%e9%80%a3%e7%b7%9a%e7%8b%80%e6%b3%81&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    開始前，可以先檢測目前與 Github 的 SSH 連線狀況
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh -T git@github.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果沒有設定過 SSH 連線，則會返回 Permission denied 的錯誤訊息，如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;mailto:git@github.com&#34; &gt;git@github.com&lt;/a&gt;: Permission denied (publickey).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;git-設定-ssh-連線&#34;&gt;
    &lt;a href=&#34;#git-%e8%a8%ad%e5%ae%9a-ssh-%e9%80%a3%e7%b7%9a&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Git 設定 SSH 連線
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;產生金鑰&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh-keygen -t rsa -b &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; -C &lt;span class=&#34;s2&#34;&gt;&amp;#34;你的E-mail&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 也可直接打&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-keygen
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://hackmd.io/_uploads/rkJAWIz7a.png&#34;&gt;
            &lt;img src=&#34;https://hackmd.io/_uploads/rkJAWIz7a.png&#34; loading=&#34;lazy&#34; alt=&#34;image.png&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;進入金鑰資料夾查看&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /c/Users/&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;userName&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;/.ssh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 通常會有  id_rsa、id_rsa.pub 兩個檔案&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;到 GitHub 設置鑰匙&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;開啟GitHub，登入後點頭像的 Settings&lt;/li&gt;
&lt;li&gt;點擊左邊 Access 的 SSH keys and GPG keys&lt;/li&gt;
&lt;li&gt;點選 New SSH key&lt;/li&gt;
&lt;li&gt;回到 git 畫面，輸入指令查看id_rsa.pub裡面的資料，並將顯示的資料填回 github 的key欄位。其中 Title 的部分可寫可不寫&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$  cat id_rsa.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;查看 ssh 連線是否成功，中間要輸入密碼&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh -T git@github.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;阻止特定檔案被-push-到-github-上&#34;&gt;
    &lt;a href=&#34;#%e9%98%bb%e6%ad%a2%e7%89%b9%e5%ae%9a%e6%aa%94%e6%a1%88%e8%a2%ab-push-%e5%88%b0-github-%e4%b8%8a&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    阻止特定檔案被 push 到 GitHub 上
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;新增 &lt;code&gt;.gitignore&lt;/code&gt; 檔案&lt;/li&gt;
&lt;li&gt;內容放要被忽略的檔案類型
例如，想要忽略所有 .log 檔案、&lt;code&gt;/model&lt;/code&gt; 資料夾&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*.log
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/model
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;重新提交到暫存區&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 清除本機 Git 的快取，就是將所有檔案移除 Git 的追蹤，但沒有刪除檔案&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git rm -r --cached .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 重新加入 Git 追蹤，這時就會重新套入 .gitignore 設定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 重新 commit ，並會忽略設定在 .gitignore 的檔案&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git commit -m &lt;span class=&#34;s1&#34;&gt;&amp;#39;update .gitignore&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;push-到-github-上&#34;&gt;
    &lt;a href=&#34;#push-%e5%88%b0-github-%e4%b8%8a&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Push 到 GitHub 上
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;進入 GitHub 建立新的 repository&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;說明：
&lt;ul&gt;
&lt;li&gt;如果是全新開始，請依「create a new repository on the command line」的內容指示進行；如果是要上傳現存專案，則依照「push an existing repository from the command line」選項進行。&lt;/li&gt;
&lt;li&gt;可以看到在 Quick start 那邊有 HTTPS 跟 SSH 兩個，若用 HTTPS 的話在登入時會需要輸入帳號密碼，而使用 SSH 的話則需要使用密鑰來登入，以下介紹 SSH 的使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;獲取 ssh 連線地址
進入 Repository 點擊
&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://hackmd.io/_uploads/HJf6EUfXp.png&#34;&gt;
            &lt;img src=&#34;https://hackmd.io/_uploads/HJf6EUfXp.png&#34; loading=&#34;lazy&#34; alt=&#34;image.png&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;設定遠端節點&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git remote add origin &amp;lt;ssh 連線地址&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;- 說明：
1. git remote 指令，顧名思義，主要是跟遠端有關的操作。
2. add 指令是指要加入一個遠端的節點。
3. 在這裡的 origin 是一個「代名詞」，指的是後面那串 GitHub 伺服器的位置。
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;查詢遠端節點&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git remote -v
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 出現以下&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;origin  git@github.com:charlieUWUuwu/practice-git2.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;origin  git@github.com:charlieUWUuwu/practice-git2.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;查詢遠端節點分支&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch -r
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;更改遠端節點的位置
&lt;blockquote&gt;
&lt;p&gt;✨: 若傳案起初是從別人那邊 clone 過來的，記得執行這邊，將 url 改到自己的倉庫&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git remote set-url origin &amp;lt;新網址&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;刪除遠端節點&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# $ git remote rm origin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git remote rm &amp;lt;遠端節點名&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;資料推到github上&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#$ git push -u origin master&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git push -u &amp;lt;遠端節點名&amp;gt; &amp;lt;branch名&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;✨: 檔案不能超過 100M，否則後續 push 會一直失敗&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解決辦法 : &lt;a class=&#34;link&#34; href=&#34;https://www.twblogs.net/a/5ca39948bd9eee5b1a06eede&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.twblogs.net/a/5ca39948bd9eee5b1a06eede&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;注意! Windows 系統要用 &amp;quot; 而不是 &amp;lsquo;，否則會出現 rm 錯誤啥的&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;從-github-上-pull-下來&#34;&gt;
    &lt;a href=&#34;#%e5%be%9e-github-%e4%b8%8a-pull-%e4%b8%8b%e4%be%86&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    從 GitHub 上 Pull 下來
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;✨: 以下是建立在【自己已經有這個專案】的前提下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;跟 Push 指令相反，Pull 指令是拉回本機更新。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pull 下載更新
git pull = git fetch + git merge
上線抓東西下來（Fetch），並且更新本機的進度（Merge）。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git pull
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;clone--第一次使用專案時抓取遠端檔案&#34;&gt;
    &lt;a href=&#34;#clone--%e7%ac%ac%e4%b8%80%e6%ac%a1%e4%bd%bf%e7%94%a8%e5%b0%88%e6%a1%88%e6%99%82%e6%8a%93%e5%8f%96%e9%81%a0%e7%ab%af%e6%aa%94%e6%a1%88&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Clone : 第一次使用專案時，抓取遠端檔案
&lt;/h3&gt;&lt;p&gt;Clone 指令會把整個專案的內容複製一份到你的電腦裡，這裡指的「內容」不是只有檔案，而是指所有整個專案的歷史紀錄、分支、標籤等內容都會複製一份下來。&lt;/p&gt;
&lt;p&gt;:bulb: 以下使用 [SSH] 的連結&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git clone git@github.com:kaochenlong/dummy-git.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 若要 Clone 下來之後存成不同的目錄名稱&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git clone git@github.com:kaochenlong/dummy-git.git hello_kitty
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pull-requestpr-與其它開發者的互動&#34;&gt;
    &lt;a href=&#34;#pull-requestpr-%e8%88%87%e5%85%b6%e5%ae%83%e9%96%8b%e7%99%bc%e8%80%85%e7%9a%84%e4%ba%92%e5%8b%95&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Pull Request（PR）: 與其它開發者的互動
&lt;/h3&gt;&lt;p&gt;在 GitHub 專案畫面上有Fork跟Pull Request按鈕可以按
Fork : 複製別人的專案到自己帳號底下
Pull Request : 修改完東西後，發通知給原作者問他要不要 pull 你的專案(還記得pull裡面有merge的功能嗎，如果原作者pull你就表示他要跟你的合併)&lt;/p&gt;
&lt;p&gt;也建議看一下這個 &lt;a class=&#34;link&#34; href=&#34;https://june.monster/git-github-work-with-github/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git + GitHub 版本控制教學 (5) - 使用 GitHub 與團隊合作&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;和朋朋協作專案&#34;&gt;
    &lt;a href=&#34;#%e5%92%8c%e6%9c%8b%e6%9c%8b%e5%8d%94%e4%bd%9c%e5%b0%88%e6%a1%88&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    和朋朋協作專案
&lt;/h2&gt;&lt;p&gt;借用一下之前和同學比賽的內容&lt;/p&gt;
&lt;h3 id=&#34;how-to-maintain-a-repo&#34;&gt;
    &lt;a href=&#34;#how-to-maintain-a-repo&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    How to maintain a repo
&lt;/h3&gt;&lt;p&gt;每次增修內容前請依循下列流程進行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pull origin/develop 最新版本
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git pull origin develop
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;在 local 新增 branch 並切換
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git checkout -b &amp;lt;NEW_BRANCH_NAME&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;編輯完成後進行 commit
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;COMMIT_MSG&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;回到 develop 再次獲取 origin/develop 的最新版本、與自己的修正合併並修正出現的 conflict
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git checkout develop
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git pull
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git checkout &amp;lt;NEW_BRANCH_NAME&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git rebase develop
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;將新 branch 的修正與 develop 合併並 push 到 Github
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git checkout develop
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git merge &amp;lt;NEW_BRANCH_NAME&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git push
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;contributing-guidelines&#34;&gt;
    &lt;a href=&#34;#contributing-guidelines&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Contributing Guidelines
&lt;/h3&gt;&lt;p&gt;以下講解 branch 命名，以及撰寫 commit 的一種規則。
後也可以先看 &lt;a class=&#34;link&#34; href=&#34;https://hackmd.io/@CynthiaChuang/Git-Commit-Message-Style&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;git commit 都怎麼寫的&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;git-branch-naming&#34;&gt;
    &lt;a href=&#34;#git-branch-naming&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Git Branch Naming
&lt;/h4&gt;&lt;p&gt;Except for permanent branches (e.g. &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt;), all temporary branches should be named in the format &lt;code&gt;&amp;lt;TYPE&amp;gt;/&amp;lt;ISSUE&amp;gt;-&amp;lt;DETAIL&amp;gt;&lt;/code&gt; such as &lt;code&gt;feat/1-integer-datatype&lt;/code&gt;. If the goal of a branch has not related to any issues, you can either create an issue to describe the detail of your planning or skip the &lt;code&gt;&amp;lt;ISSUE&amp;gt;-&lt;/code&gt; in the branch name. With this convention, we can understand the purpose of each branch from its name directly.&lt;/p&gt;
&lt;p&gt;There are several catagories that are available for &lt;code&gt;&amp;lt;TYPE&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bug&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;git-commit-message-convention&#34;&gt;
    &lt;a href=&#34;#git-commit-message-convention&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Git Commit Message Convention
&lt;/h4&gt;&lt;p&gt;There are some common commit types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feat&lt;/code&gt;: A new feature.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fix&lt;/code&gt;: A bug to be fixed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;style&lt;/code&gt;: Changes about coding style without changing the behavior.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BREAKING CHANGE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;perf&lt;/code&gt;: Improve the performance of a functionality.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;refactor&lt;/code&gt;: Restructure the implementation of a functionality without changing its behavior.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;revert&lt;/code&gt;: Revert a previous commit without other changes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chore&lt;/code&gt;: Changes about build tools or project configurations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt;: Add or correct tests.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docs&lt;/code&gt;: Update documentations only.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update&lt;/code&gt;: update document (not code)、 db、 json、 md&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Pixel2style2pixel</title>
        <link>https://charlieUWUuwu.github.io/p/pixel2style2pixel/</link>
        <pubDate>Fri, 26 Apr 2024 00:06:37 +0800</pubDate>
        
        <guid>https://charlieUWUuwu.github.io/p/pixel2style2pixel/</guid>
        <description>&lt;p&gt;先介紹 PGGAN &amp;gt; StyleGAN &amp;gt; pSp&lt;/p&gt;
&lt;script src= &#39;/js/pdf-js/build/pdf.js&#39;&gt;&lt;/script&gt;

&lt;style&gt;
  #embed-pdf-container {
    position: relative;
    width: 100%;
    height: auto;
    min-height: 20vh;
     
  }
  
  .pdf-canvas {
    border: 1px solid black;
    direction: ltr;
    width: 100%;
    height: auto;
    display: none;
  }
  
  #the-canvas {
    border: 1px solid black;
    direction: ltr;
    width: 100%;
    height: auto;
    display: none;
  }
  
  
  .pdf-loadingWrapper {
    display: none;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 350px;
  }
  
  .pdf-loading {
    display: inline-block;
    width: 50px;
    height: 50px;
    border: 3px solid #d2d0d0;;
    border-radius: 50%;
    border-top-color: #383838;
    animation: spin 1s ease-in-out infinite;
    -webkit-animation: spin 1s ease-in-out infinite;
  }
  
  
  
  
  
  #overlayText {
    word-wrap: break-word;
    display: grid;
    justify-content: end;
  }
  
  #overlayText a {
    position: relative;
    top: 10px;
    right: 4px;
    color: #000;
    margin: auto;
    background-color: #eeeeee;
    padding: 0.3em 1em;
    border: solid 2px;
    border-radius: 12px;
    border-color: #00000030;
    text-decoration: none;
  }
  
  #overlayText svg {
    height: clamp(1em, 2vw, 1.4em);
    width:  clamp(1em, 2vw, 1.4em);
  }
  
  
  
  @keyframes spin {
    to { -webkit-transform: rotate(360deg); }
  }
  @-webkit-keyframes spin {
    to { -webkit-transform: rotate(360deg); }
  }
  &lt;/style&gt;&lt;div class=&#34;embed-pdf-container&#34; id=&#34;embed-pdf-container-1cec89bc&#34;&gt;
    &lt;div class=&#34;pdf-loadingWrapper&#34; id=&#34;pdf-loadingWrapper-1cec89bc&#34;&gt;
        &lt;div class=&#34;pdf-loading&#34; id=&#34;pdf-loading-1cec89bc&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&#34;overlayText&#34;&gt;
      &lt;a href=&#34;https://charlieUWUuwu.github.io/file/styleGAN.pdf&#34; aria-label=&#34;Download&#34; download&gt;
        &lt;svg aria-hidden=&#34;true&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 18 18&#34;&gt;
            &lt;path d=&#34;M9 13c.3 0 .5-.1.7-.3L15.4 7 14 5.6l-4 4V1H8v8.6l-4-4L2.6 7l5.7 5.7c.2.2.4.3.7.3zm-7 2h14v2H2z&#34; /&gt;
        &lt;/svg&gt;
      &lt;/a&gt;
    &lt;/div&gt;
    &lt;canvas class=&#34;pdf-canvas&#34; id=&#34;pdf-canvas-1cec89bc&#34;&gt;&lt;/canvas&gt;
&lt;/div&gt;

&lt;div class=&#34;pdf-paginator&#34; id=&#34;pdf-paginator-1cec89bc&#34;&gt;
    &lt;button id=&#34;pdf-prev-1cec89bc&#34;&gt;Previous&lt;/button&gt;
    &lt;button id=&#34;pdf-next-1cec89bc&#34;&gt;Next&lt;/button&gt; &amp;nbsp; &amp;nbsp;
    &lt;span&gt;
      &lt;span class=&#34;pdf-pagenum&#34; id=&#34;pdf-pagenum-1cec89bc&#34;&gt;&lt;/span&gt; / &lt;span class=&#34;pdf-pagecount&#34; id=&#34;pdf-pagecount-1cec89bc&#34;&gt;&lt;/span&gt;
    &lt;/span&gt;
    &lt;a class=&#34;pdf-source&#34; id=&#34;pdf-source-1cec89bc&#34; href=&#34;https://charlieUWUuwu.github.io/file/styleGAN.pdf&#34;&gt;[pdf]&lt;/a&gt;
&lt;/div&gt;

&lt;noscript&gt;
View the PDF file &lt;a class=&#34;pdf-source&#34; id=&#34;pdf-source-noscript-1cec89bc&#34; href=&#34;https://charlieUWUuwu.github.io/file/styleGAN.pdf&#34;&gt;here&lt;/a&gt;.
&lt;/noscript&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
    (function(){
    var url = &#39;\/file\/styleGAN.pdf&#39;;

    var hidePaginator = &#34;&#34; === &#34;true&#34;;
    var hideLoader = &#34;&#34; === &#34;true&#34;;
    var selectedPageNum = parseInt(&#34;&#34;) || 1;

    
    var pdfjsLib = window[&#39;pdfjs-dist/build/pdf&#39;];

    
    if (pdfjsLib.GlobalWorkerOptions.workerSrc == &#39;&#39;)
      pdfjsLib.GlobalWorkerOptions.workerSrc = &#34;https:\/\/charlieUWUuwu.github.io\/&#34; + &#39;js/pdf-js/build/pdf.worker.js&#39;;

    
    var pdfDoc = null,
        pageNum = selectedPageNum,
        pageRendering = false,
        pageNumPending = null,
        scale = 3,
        canvas = document.getElementById(&#39;pdf-canvas-1cec89bc&#39;),
        ctx = canvas.getContext(&#39;2d&#39;),
        paginator = document.getElementById(&#34;pdf-paginator-1cec89bc&#34;),
        loadingWrapper = document.getElementById(&#39;pdf-loadingWrapper-1cec89bc&#39;);


    
    showPaginator();
    showLoader();

    

    function renderPage(num) {
      pageRendering = true;
      
      pdfDoc.getPage(num).then(function(page) {
        var viewport = page.getViewport({scale: scale});
        canvas.height = viewport.height;
        canvas.width = viewport.width;

        
        var renderContext = {
          canvasContext: ctx,
          viewport: viewport
        };
        var renderTask = page.render(renderContext);

        
        renderTask.promise.then(function() {
          pageRendering = false;
          showContent();

          if (pageNumPending !== null) {
            
            renderPage(pageNumPending);
            pageNumPending = null;
          }
        });
      });

      
      document.getElementById(&#39;pdf-pagenum-1cec89bc&#39;).textContent = num;
    }

    

    function showContent() {
      loadingWrapper.style.display = &#39;none&#39;;
      canvas.style.display = &#39;block&#39;;
    }

    

    function showLoader() {
      if(hideLoader) return
      loadingWrapper.style.display = &#39;flex&#39;;
      canvas.style.display = &#39;none&#39;;
    }

    

    function showPaginator() {
      if(hidePaginator) return
      paginator.style.display = &#39;block&#39;;
    }

    

    function queueRenderPage(num) {
      if (pageRendering) {
        pageNumPending = num;
      } else {
        renderPage(num);
      }
    }

    

    function onPrevPage() {
      if (pageNum &lt;= 1) {
        return;
      }
      pageNum--;
      queueRenderPage(pageNum);
    }
    document.getElementById(&#39;pdf-prev-1cec89bc&#39;).addEventListener(&#39;click&#39;, onPrevPage);

    

    function onNextPage() {
      if (pageNum &gt;= pdfDoc.numPages) {
        return;
      }
      pageNum++;
      queueRenderPage(pageNum);
    }
    document.getElementById(&#39;pdf-next-1cec89bc&#39;).addEventListener(&#39;click&#39;, onNextPage);

    

    pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
      pdfDoc = pdfDoc_;
      var numPages = pdfDoc.numPages;
      document.getElementById(&#39;pdf-pagecount-1cec89bc&#39;).textContent = numPages;

      
      if(pageNum &gt; numPages) {
        pageNum = numPages
      }

      
      renderPage(pageNum);
    });
    })();
&lt;/script&gt;

&lt;h1 id=&#34;pix2style2pixpsp-論文閱讀&#34;&gt;
    &lt;a href=&#34;#pix2style2pixpsp-%e8%ab%96%e6%96%87%e9%96%b1%e8%ae%80&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    pix2style2pix(pSp) 論文閱讀
&lt;/h1&gt;&lt;p&gt;paper: &lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/2008.00951&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Encoding in Style: a StyleGAN Encoder for Image-to-Image Translation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;abstract&#34;&gt;
    &lt;a href=&#34;#abstract&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Abstract
&lt;/h2&gt;&lt;p&gt;先前 styleGAN 已經可以生成高品質的人臉，且可以控制圖像特定特徵(完成特徵解纏)，但主要是針對生成器架構做改進，因此還不能進行 img2img 任務。而 pSp 進行了以下改善 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提出&lt;strong&gt;通用框架 pixel2style2pixel(pSp)&lt;/strong&gt;，實現 image-to-image
&lt;ul&gt;
&lt;li&gt;新的 encoder + 預訓練 styleGAN generator(decoder)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提出新的 encoder 架構
&lt;ul&gt;
&lt;li&gt;基於特徵金字塔網路 (Feature Pyramid Network)&lt;/li&gt;
&lt;li&gt;能夠產生 style vector 並輸入到預訓練的 StyleGAN 生成器，形成 extended $\textit{W+}$ latent space&lt;/li&gt;
&lt;li&gt;不需進行耗時最佳化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不需要使用成對訓練資料&lt;/li&gt;
&lt;li&gt;透過對 styleGAN 做 resample，進行多模態合成
&lt;ul&gt;
&lt;li&gt;訓練 encoder 時引入 ID loss，避免影像重建後變了一個人(更精準的控制細節)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introduction&#34;&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Introduction
&lt;/h2&gt;&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/pixel2style2pixel/1_intro.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/pixel2style2pixel/1_intro.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;先前 styleGAN 是「invert first, edit later」(先反轉到latent space，再生成影像)，但將真實影像反轉為 512 維向量 w ∈ W 不能做準確的重建。而 pSp 將真實影像編碼到 W+，也就是直接將輸入影像編碼為對應的輸出潛在影像，從而允許處理不屬於 StyleGAN 域的輸入。&lt;/p&gt;
&lt;p&gt;W+ latent space 由 18 個不同的 512 維 w 向量串聯(18x512x1)，且每一個向量會送給 styleGAN 每一個輸入層，但單一影像用此方法優化就會需要好幾分鐘。因此將真實影像快速且準確地反演為 W+ 仍然是一個挑戰。&lt;/p&gt;
&lt;p&gt;遵循 pix2pix 精神，定義能夠解決所有任務的通用架構。pix2style2pix 表示先將圖像用 encoder 編碼成 style vector，然後再用 decoer 轉回圖像。&lt;/p&gt;
&lt;p&gt;不需對手鑑別器 (adversary discriminator)，而直接使用預訓練 styleGAN，因此有以下優勢 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成器僅受 style 控制，沒有直接的空間輸入&lt;/li&gt;
&lt;li&gt;intermediate style 適合模糊任務的【多模態合成】 (例如 sketch2img、影像高清化等，可以做髮色改變之類的)。這是因為可以對生成的 style 重新採樣來創建輸出圖像的變體。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-psp-framework&#34;&gt;
    &lt;a href=&#34;#the-psp-framework&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    The pSp Framework
&lt;/h2&gt;&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/pixel2style2pixel/2_framework.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/pixel2style2pixel/2_framework.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;使用一個強大的 encoder，能將每個輸入影像與 latent domain 中的準確編碼相匹配。將圖像嵌入到 latent domain 有一些做法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(傳統) 從 encoder 最後一層獲得單一 512 維向量，直接 repeat 18 次成為 W+，從而一起學習所有 18 個風格向量。但難以表示原始影像的精細細節，導致重建品質受限。&lt;/li&gt;
&lt;li&gt;(pSp) 先前 styleGAN 的特徵依據分層結構的深淺，代表不同粒度的特徵。pSp 依此出發，使用特徵金字塔擴展 encoder 主幹，產生三個層級的特徵圖，從全連接層(map2style)提取 style(如上圖) 產生 latent code(512*1)。接著輸入到生成器中對應的地方以產生影像。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這邊將輸入定義為 :&lt;/p&gt;
&lt;p&gt;$pSp(x):=G(E(x)+\bar{w})$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x: 輸入影像&lt;/li&gt;
&lt;li&gt;E(·) 和 G(·): encoder 跟 StyleGAN 生成器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;公式中，encoder 旨在學習相對於 average style vector 的 latent code。&lt;/p&gt;
&lt;h3 id=&#34;loss-functions&#34;&gt;
    &lt;a href=&#34;#loss-functions&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Loss Functions
&lt;/h3&gt;&lt;p&gt;encoder 的訓練是透過多個 loss 的加權組合而成的。&lt;/p&gt;
&lt;p&gt;$\mathcal{L_2}(x)=|x-pSp(x)|_2$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pixel-wise L2 loss&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$\mathcal{L}_{PIPS}(x)=|F(x)-F(pSp(x))|_2$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;為了學習感知相似性，利用 LPIPS 損失(已被證明可以更好地保持影像品質)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$\mathcal{L}_{reg}(x)=|E(x)-\bar{w}|_2$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鼓勵編碼器輸出更接近平均latent vector的latent styke vector，另外定義的正規化損失&lt;/li&gt;
&lt;li&gt;與 StyleGAN 中的截斷技巧類似，作者發現在encoder的訓練中添加這種正則化可以提高圖像品質，而不損害輸出的保真度，特別是在更模糊的任務中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$\mathcal{L}_{ID}(x)=1-&amp;lt;R(x),\ R(pSp(x))&amp;gt;$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;處理臉部影像編碼的特定任務時的一個常見挑戰是保存輸入身分，因此採用專用的辨識損失來測量輸出影像與其來源影像之間的餘弦相似度&lt;/li&gt;
&lt;li&gt;R: 預訓練的 ArcFace 模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$\mathcal{L}(x)=\lambda_1\mathcal{L}&lt;em&gt;2(x)+\lambda_2\mathcal{L}&lt;/em&gt;{PIPS}(x)+\lambda_3\mathcal{L}&lt;em&gt;{ID}(x)+\lambda_4\mathcal{L}&lt;/em&gt;{reg}(x)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最終結果。其中$\lambda_1$~$\lambda_4$是定義損失權重的常數。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-benefits-of-the-stylegan-domain&#34;&gt;
    &lt;a href=&#34;#the-benefits-of-the-stylegan-domain&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    The Benefits of The StyleGAN Domain
&lt;/h3&gt;&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/pixel2style2pixel/3_stylemixing.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/pixel2style2pixel/3_stylemixing.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;透過 style domain 做圖像轉換使 pSp 在全局而非local運行，因此不需要像 pix2pix 的對應。&lt;/p&gt;
&lt;p&gt;由於某些翻譯任務是不明確的，其中單一輸入影像可能對應於多個輸出，因此希望能夠對這些可能的輸出進行取樣。&lt;/p&gt;
&lt;p&gt;前人文獻提到特徵解纏(語義分離)是因為 layer-wise representation 帶來的，因為能獨立操作特徵，自然就會想要「&lt;strong&gt;多模態數據生成&lt;/strong&gt;」。&lt;/p&gt;
&lt;p&gt;論文做法如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;圖片經過 encoder 生成 latent code(18x512x1)，輸入給 style mixing 網路內的 1~7 層使用&lt;/li&gt;
&lt;li&gt;隨機採樣向量 $w ∈ R^{512}$ ，並複製 w 在 W+ 中產生相應的 latent code，輸入給style mixing 網路內的剩下層。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;可以加入參數來控制兩者的融合，在 pSp 中是在 coarse 跟 medium 層面上使用圖像經 encode 輸出的 style，fine 才使用隨機變量，以保證產生的是同一個人，但有不同的細節變化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;applications-and-experiments&#34;&gt;
    &lt;a href=&#34;#applications-and-experiments&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Applications and Experiments
&lt;/h2&gt;&lt;p&gt;在許多 img2img 的任務尚實驗，確定方法的有效性。&lt;/p&gt;
&lt;h3 id=&#34;stylegan-inversion&#34;&gt;
    &lt;a href=&#34;#stylegan-inversion&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    StyleGAN Inversion
&lt;/h3&gt;&lt;p&gt;在 latent domain 中找到 real image 的 leatent code。也就是要比較 encoder 轉換後的 latent code，能否有比較準確的生成效果。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/pixel2style2pixel/4_stylegan_inversion.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/pixel2style2pixel/4_stylegan_inversion.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
結果 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ALAE 方法在 W 域中運行，無法準確地重建輸入影像。&lt;/li&gt;
&lt;li&gt;雖然 IDInvert 更好地保留了影像屬性，但它仍然無法準確保留輸入影像的身份和更精細的細節。相較之下，pSp 能夠保留身份，同時重建燈光、髮型和眼鏡等細節。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;✨ IDInvert中，首先將要轉換的圖像編碼成潛在向量（latent code），這個潛在向量是StyleGAN預訓練模型的潛在空間中的一個點。然後，通過對生成的圖像進行直接優化，調整這個潛在向量，使生成的圖像盡可能地接近原始圖像。這樣做的目的是在不重新訓練整個StyleGAN模型的情況下，將圖像轉換到StyleGAN的潛在空間中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/pixel2style2pixel/5_stylegan_inversion2.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/pixel2style2pixel/5_stylegan_inversion2.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
接著做 pSp 架構的消融實驗&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;W : 從 encoder 最後一層提取出在 512 維的 style vector(屬於 W latent domain)&lt;/li&gt;
&lt;li&gt;Naive W+ : 承上，接著使用具有附加層的 encoder，將 1x512 特徵向量轉為 18x512 的 W+ 向量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;結果 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;W+ 擴展顯著改善了結果，但仍然無法保留更精細的細節。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/pixel2style2pixel/6_stylegan_inversion3.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/pixel2style2pixel/6_stylegan_inversion3.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
有 ID loss 能夠帶來更好的生分特徵(重建後不會變一個人)&lt;/p&gt;
&lt;p&gt;接下來就是對不同影像生成任務情景做實驗觀察，詳見論文。&lt;/p&gt;
&lt;h3 id=&#34;face-frontalization&#34;&gt;
    &lt;a href=&#34;#face-frontalization&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Face Frontalization
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;由於需要非局部轉換並且缺乏配對訓練數據，臉部正面化對於影像到影像轉換框架來說是一項具有挑戰性的任務。
略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;conditional-image-synthesis&#34;&gt;
    &lt;a href=&#34;#conditional-image-synthesis&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Conditional Image Synthesis
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;條件影像合成旨在產生基於某些輸入類型的逼真影像。在本節中，我們的 pSp 架構在兩個條件影像生成任務上進行了測試。
從草圖和語意分割圖產生高品質的人臉影像。
我們證明，只需進行最小的更改，我們的編碼器就可以成功利用 StyleGAN 的表達能力來產生高品質和多樣化的輸出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;face-from-sketch&#34;&gt;
    &lt;a href=&#34;#face-from-sketch&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Face From Sketch
&lt;/h4&gt;&lt;p&gt;草圖到真實圖過往需要成對資料，然而 pSp 不需要。&lt;/p&gt;
&lt;p&gt;作者團隊建立了草圖影像資料集，有很多人臉手繪插圖&lt;/p&gt;
&lt;p&gt;作者觀察到 pSp 獲得更多樣化輸出的能力，這些輸出可以更好地保留更精細的細節（例如臉部毛髮）。&lt;/p&gt;
&lt;h2 id=&#34;discussion&#34;&gt;
    &lt;a href=&#34;#discussion&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Discussion
&lt;/h2&gt;&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/pixel2style2pixel/7_discussion.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/pixel2style2pixel/7_discussion.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;pSp 仍然有一些固有假設(inherent assumptions):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;產生圖像受限
&lt;ul&gt;
&lt;li&gt;因為使用預訓練 styleGAN，所以能夠生成的圖像僅限於 styleGAN 可以產生的圖像。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目前仍難以保留輸入影像的更精細細節(見上圖)
&lt;ul&gt;
&lt;li&gt;pSp 的全局方法在不同任務上的通用性高，但還無法保留輸入影像的更精細細節（例如耳環或背景細節）&lt;/li&gt;
&lt;li&gt;這對於影像修復等任務很重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;✨ 其他實驗見論文拉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;ref&#34;&gt;
    &lt;a href=&#34;#ref&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Ref
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/xjm850552586/article/details/123113080&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pixel2style2pixel（pSp）实现解读&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Chat_streamer</title>
        <link>https://charlieUWUuwu.github.io/p/chat_streamer/</link>
        <pubDate>Wed, 10 Apr 2024 03:30:04 +0800</pubDate>
        
        <guid>https://charlieUWUuwu.github.io/p/chat_streamer/</guid>
        <description>&lt;h2 id=&#34;說明&#34;&gt;
    &lt;a href=&#34;#%e8%aa%aa%e6%98%8e&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    說明
&lt;/h2&gt;&lt;p&gt;就像 ChatGPT 那樣一個字一個字跑出來。這個方法是在 &lt;a class=&#34;link&#34; href=&#34;https://github.com/hiyouga/LLaMA-Factory&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LLaMA-Factory&lt;/a&gt; 看到的。
完整 code 可以在&lt;a class=&#34;link&#34; href=&#34;https://github.com/charlieUWUuwu/NTTU_meta_campus_chat/blob/develop/src/llmtuner/chat/streamer.py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;這個專案&lt;/a&gt;裡面找&lt;/p&gt;
&lt;h2 id=&#34;用-huggingface-模型做流式輸出&#34;&gt;
    &lt;a href=&#34;#%e7%94%a8-huggingface-%e6%a8%a1%e5%9e%8b%e5%81%9a%e6%b5%81%e5%bc%8f%e8%bc%b8%e5%87%ba&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    用 HuggingFace 模型做流式輸出
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;HuggingFace 的 v4.30.1 加入了兩個流式輸出的接口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TextStreamer: 能在 stdout 中流式輸出结果&lt;/li&gt;
&lt;li&gt;TextIteratorStreamer：能在自定義 loop 中進行操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;textstreamer&#34;&gt;
    &lt;a href=&#34;#textstreamer&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    TextStreamer
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 來自 https://huggingface.co/docs/transformers/main/generation_strategies&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;transformers&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AutoModelForCausalLM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AutoTokenizer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextStreamer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;tok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AutoTokenizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_pretrained&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gpt2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AutoModelForCausalLM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_pretrained&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gpt2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;An increasing sequence: one,&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;return_tensors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;streamer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextStreamer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Despite returning the usual output, the streamer will also print the generated text to stdout.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;streamer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;streamer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_new_tokens&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;textiteratorstreamer&#34;&gt;
    &lt;a href=&#34;#textiteratorstreamer&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    TextIteratorStreamer
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 來自 https://huggingface.co/docs/transformers/main/generation_strategies&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;transformers&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AutoModelForCausalLM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AutoTokenizer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextIteratorStreamer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;threading&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;tok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AutoTokenizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_pretrained&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gpt2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AutoModelForCausalLM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_pretrained&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gpt2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;An increasing sequence: one,&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;return_tensors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;streamer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextIteratorStreamer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Run the generation in a separate thread, so that we can fetch the generated text in a non-blocking way.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;generation_kwargs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;streamer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;streamer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_new_tokens&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;thread&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generation_kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;generated_text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_text&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;streamer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;generated_text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;generated_text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;用-chatglm-示範&#34;&gt;
    &lt;a href=&#34;#%e7%94%a8-chatglm-%e7%a4%ba%e7%af%84&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    用 ChatGLM 示範
&lt;/h3&gt;&lt;p&gt;參考 &lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_44491772/article/details/131205174&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[AI]如何让语言模型LLMs流式输出：HuggingFace Transformers实现&lt;/a&gt; 中的「ChatGLM流式回覆Demo」部分&lt;/p&gt;
&lt;h2 id=&#34;讓-openai-模型也能流式輸出&#34;&gt;
    &lt;a href=&#34;#%e8%ae%93-openai-%e6%a8%a1%e5%9e%8b%e4%b9%9f%e8%83%bd%e6%b5%81%e5%bc%8f%e8%bc%b8%e5%87%ba&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    讓 OpenAI 模型也能流式輸出
&lt;/h2&gt;&lt;p&gt;參考 &lt;a class=&#34;link&#34; href=&#34;https://github.com/huggingface/transformers/blob/main/src/transformers/generation/streamers.py#L24&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Huggingface 官方實現的 BaseStreamer&lt;/a&gt; 寫出來的。&lt;/p&gt;
&lt;h3 id=&#34;設定-openai-模型&#34;&gt;
    &lt;a href=&#34;#%e8%a8%ad%e5%ae%9a-openai-%e6%a8%a1%e5%9e%8b&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    設定 OpenAI 模型
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;streaming&lt;/code&gt;設置為&lt;code&gt;True&lt;/code&gt;，可以不用等一句話完全生完後才得到回覆&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StreamingStdOutCallbackHandler&lt;/code&gt; 是 Langchain 的一個 callback 處理器，會在語言模型模型生成新 token 時被觸發(&lt;code&gt;on_llm_new_token&lt;/code&gt;())，並透過&lt;code&gt;sys.stdout.write(token)&lt;/code&gt;與&lt;code&gt;sys.stdout.flush()&lt;/code&gt;來確保輸出即時可見。
&lt;ul&gt;
&lt;li&gt;說明可見&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/China_boy007/article/details/136445246&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;這個部落格&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;langchain_openai&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ChatOpenAI&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;langchain.callbacks.streaming_stdout&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StreamingStdOutCallbackHandler&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ChatOpenAI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;streaming&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callbacks&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StreamingStdOutCallbackHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temperature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;撰寫-chatgptstreamer&#34;&gt;
    &lt;a href=&#34;#%e6%92%b0%e5%af%ab-chatgptstreamer&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    撰寫 ChatgptStreamer
&lt;/h3&gt;&lt;p&gt;主要是透過 Python 的 Iterator 來實現的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_on_finalized_text()&lt;/code&gt; : 將收到的 text 存到 queue，直到收到 stream 結束訊號(stream_end==True)，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;model_generate()&lt;/code&gt; : 接收語言模型並調用&lt;code&gt;.stream()&lt;/code&gt;來獲得流式輸出，最後後塞入&lt;code&gt;stop_signal&lt;/code&gt;表輸出結束。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Queue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ChatgptStreamer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text_queue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stop_signal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_on_finalized_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stream_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Put the new text in the queue. If the stream is ending, also put a stop signal in the queue.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text_queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stream_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text_queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stop_signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;model_generate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;請你根據以下參考資料回答問題。&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;相關資料:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;問題:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_on_finalized_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_on_finalized_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stop_signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__iter__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__next__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text_queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stop_signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;StopIteration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;streamerthread-進行生成&#34;&gt;
    &lt;a href=&#34;#streamerthread-%e9%80%b2%e8%a1%8c%e7%94%9f%e6%88%90&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Streamer+Thread 進行生成
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@torch.inference_mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;stream_chat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;history&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_kwargs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Generator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;gen_kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_process_args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;history&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gen_kwargs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 使用 ChatOpenAI &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;streamer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ChatgptStreamer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;thread&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;streamer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model_generate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 使用 Huggingface 模型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;streamer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextIteratorStreamer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tokenizer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;60.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;skip_prompt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;skip_special_tokens&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;gen_kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;streamer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;streamer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;thread&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gen_kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;yield from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;streamer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用&#34;&gt;
    &lt;a href=&#34;#%e4%bd%bf%e7%94%a8&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    使用
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;predict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;chatbot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;history&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Generator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]],&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;chatbot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;chatbot : &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chatbot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 從 VDB 獲取資料&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;docs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vectordb_manager&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n_results&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 回傳最相關的 5 筆相關資料&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;doc&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;docs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;doc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;page_content&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;系統提示詞 : &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_text&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream_chat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_text&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;chatbot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;postprocess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chatbot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;history&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;refs-&#34;&gt;
    &lt;a href=&#34;#refs-&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    refs :
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_44491772/article/details/131205174&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[AI]如何让语言模型LLMs流式输出：HuggingFace Transformers实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://huggingface.co/docs/transformers/main/generation_strategies&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HuggingFace 官方文件&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>SQUID</title>
        <link>https://charlieUWUuwu.github.io/p/squid/</link>
        <pubDate>Wed, 10 Apr 2024 03:30:04 +0800</pubDate>
        
        <guid>https://charlieUWUuwu.github.io/p/squid/</guid>
        <description>&lt;h1 id=&#34;squid-deep-feature-in-painting-for-unsupervised-anomaly-detection&#34;&gt;
    &lt;a href=&#34;#squid-deep-feature-in-painting-for-unsupervised-anomaly-detection&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    SQUID: Deep Feature In-Painting for Unsupervised Anomaly Detection
&lt;/h1&gt;&lt;p&gt;paper : &lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/2111.13495&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://arxiv.org/abs/2111.13495&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;abstract&#34;&gt;
    &lt;a href=&#34;#abstract&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Abstract
&lt;/h1&gt;&lt;p&gt;射線照相成像協議專注於特定的身體區域，因此產生非常相似的影像並產生跨患者的重複解剖結構。&lt;/p&gt;
&lt;p&gt;為了利用這種結構化訊息，使用 Space-aware Memory Queues for In-painting and Detecting（SQUID）來修復和偵測射線照相影像中的異常。&lt;/p&gt;
&lt;p&gt;證明 SQUID 可以將根深蒂固的解剖結構分類為循環模式(recurrent patterns)。(它可以把固有的人體結構分類為反覆出現的 pattern)&lt;/p&gt;
&lt;p&gt;在推理中，它&lt;strong&gt;可以識別圖像中的異常（未見/修改的模式）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;作者創建了一個新的資料集（DigitAnatomy），綜合了胸部解剖學中的空間相關性和一致的形狀。&lt;/p&gt;
&lt;h1 id=&#34;1-introduction&#34;&gt;
    &lt;a href=&#34;#1-introduction&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    1. Introduction
&lt;/h1&gt;&lt;h2 id=&#34;放射成像-vs-一般影像&#34;&gt;
    &lt;a href=&#34;#%e6%94%be%e5%b0%84%e6%88%90%e5%83%8f-vs-%e4%b8%80%e8%88%ac%e5%bd%b1%e5%83%8f&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    放射成像 vs 一般影像
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;普通視覺任務有平移不變性的假設(貓出現在左或是右，還是貓)；但放射線成像(radiography imaging)，結構的相對位置和方向是識別的重要特徵。&lt;/li&gt;
&lt;li&gt;且因放射成像在不同患者或設備商評估方式幾乎相似，故一致且重複的解剖結構有助於分析許多關鍵問題，並應被視為放射線成像的顯著優勢。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;放射成像的先驗知識&#34;&gt;
    &lt;a href=&#34;#%e6%94%be%e5%b0%84%e6%88%90%e5%83%8f%e7%9a%84%e5%85%88%e9%a9%97%e7%9f%a5%e8%ad%98&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    放射成像的先驗知識
&lt;/h2&gt;&lt;p&gt;有多項研究顯示添加位置特徵、修改目標函數以及約束相對於影像中地標的座標能增強深度網路效能。此偏論文希望能利用一致的解剖模式及其空間資訊，加強深度網路對放射線影像異常的檢測，而無需手動註釋。&lt;/p&gt;
&lt;h2 id=&#34;醫療異常檢測作用&#34;&gt;
    &lt;a href=&#34;#%e9%86%ab%e7%99%82%e7%95%b0%e5%b8%b8%e6%aa%a2%e6%b8%ac%e4%bd%9c%e7%94%a8&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    醫療異常檢測作用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;80% 的臨床錯誤是由於放射科醫師漏掉異常造成&lt;/li&gt;
&lt;li&gt;異常檢測作用是向放射科醫生明確指出存在可疑病變，讓他們深入查看掃描結果，減少 80% 的損失。&lt;/li&gt;
&lt;li&gt;作者將異常檢測任務制定為修復(in-painting)任務，使能夠利用放射線照相影像的外觀、位置和佈局的解剖一致性。&lt;/li&gt;
&lt;li&gt;異常檢測的成功有兩個基本假設：首先，數據中很少出現異常；其次，異常現象與正常模式顯著不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;squid-作用&#34;&gt;
    &lt;a href=&#34;#squid-%e4%bd%9c%e7%94%a8&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    SQUID 作用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;訓練期間，模型可以透過根據空間位置，對經常出現的解剖模式進行分類來動態維護visual pattern dictionary(視覺模式字典)。&lt;/li&gt;
&lt;li&gt;由於解剖學的consistency(一致性)，健康影像中相同身體區域預計會表達相似的視覺模式，使得unique pattern的總數易於管理(類型不會太多)。&lt;/li&gt;
&lt;li&gt;推理期間，由於無監督指使用健康影像訓練，故異常模式不存在於字典中。當出現異常時，產生的影像就會有所差距。也因此模型可透過區分修復任務的品質來識別異常。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;實驗簡介&#34;&gt;
    &lt;a href=&#34;#%e5%af%a6%e9%a9%97%e7%b0%a1%e4%bb%8b&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    實驗簡介
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在兩個大規模、公開的放射線照相成像資料集上進行了實驗&lt;/li&gt;
&lt;li&gt;ZhangLab dataset: 發現 SQUID 在無監督異常檢測方面明顯優於主流方法超過 5 個百分點。&lt;/li&gt;
&lt;li&gt;Stanford CheXpert dataset: 證明了比最近 13 種無監督異常檢測方法提高了 10 個百分點。&lt;/li&gt;
&lt;li&gt;創建了一個新的資料集（DigitAnatomy）
&lt;ul&gt;
&lt;li&gt;闡明放射攝影中胸部解剖結構的空間相關性和一致形狀&lt;/li&gt;
&lt;li&gt;致力於簡化異常檢測方法的開發、評估和解釋&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;貢獻&#34;&gt;
    &lt;a href=&#34;#%e8%b2%a2%e7%8d%bb&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    貢獻
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;用於胸部放射成像的最佳無監督異常檢測方法&lt;/li&gt;
&lt;li&gt;促進異常檢測研究的綜合資料集(DigitAnatomy dataset)&lt;/li&gt;
&lt;li&gt;SQUID 發明 Space-aware Memory Queue（3.2 節）和 Feature-level In-painting （3.3 節），打敗了主流無監督異常檢測方法的限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-related-work&#34;&gt;
    &lt;a href=&#34;#2-related-work&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    2. Related Work
&lt;/h1&gt;&lt;h2 id=&#34;anomaly-detection-in-natural-imaging&#34;&gt;
    &lt;a href=&#34;#anomaly-detection-in-natural-imaging&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Anomaly detection in natural imaging
&lt;/h2&gt;&lt;h3 id=&#34;過往的異常檢測&#34;&gt;
    &lt;a href=&#34;#%e9%81%8e%e5%be%80%e7%9a%84%e7%95%b0%e5%b8%b8%e6%aa%a2%e6%b8%ac&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    過往的異常檢測
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Reconstruction-based methods: 基於重建的方法訓練模型（例如Auto-Encoder）來恢復原始輸入，並透過分析重建錯誤來識別異常。&lt;/li&gt;
&lt;li&gt;Density-based methods: 估計常態資料分佈（例如透過 VAE 或 GAN）來預測異常。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，透過這些方法學習到的正常影像的分佈無法解釋可能的異常。&lt;/p&gt;
&lt;h3 id=&#34;解決無法解釋可能的異常限制&#34;&gt;
    &lt;a href=&#34;#%e8%a7%a3%e6%b1%ba%e7%84%a1%e6%b3%95%e8%a7%a3%e9%87%8b%e5%8f%af%e8%83%bd%e7%9a%84%e7%95%b0%e5%b8%b8%e9%99%90%e5%88%b6&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    解決&amp;quot;無法解釋可能的異常&amp;quot;限制
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;本篇作者透過&lt;strong&gt;維護同質醫學影像的 visual pattern memory&lt;/strong&gt;來解決。&lt;/li&gt;
&lt;li&gt;先前的其他幾項工作研究了使用影像修復進行異常檢測，即輸入影像的部分內容被屏蔽，並且訓練模型以自我監督的方式恢復遺失的部分。&lt;/li&gt;
&lt;li&gt;還有大量關於檢測影片序列中的異常的工作。伯格曼等人。和薩利希等人提出了類似的&lt;strong&gt;學生-教師網絡&lt;/strong&gt;，而我們的方法利用這種結構僅提取輸入感知特徵，並且&lt;strong&gt;教師網絡在推理過程中完全禁用&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;anomaly-detection-in-medical-imaging&#34;&gt;
    &lt;a href=&#34;#anomaly-detection-in-medical-imaging&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Anomaly detection in medical imaging
&lt;/h2&gt;&lt;h3 id=&#34;兩種學習方式檢測不同異常&#34;&gt;
    &lt;a href=&#34;#%e5%85%a9%e7%a8%ae%e5%ad%b8%e7%bf%92%e6%96%b9%e5%bc%8f%e6%aa%a2%e6%b8%ac%e4%b8%8d%e5%90%8c%e7%95%b0%e5%b8%b8&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    兩種學習方式，檢測不同異常
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基於監督學習的方法: 通常用於檢測特定類型的異常，例如病變、病理、腫瘤和結節。&lt;/li&gt;
&lt;li&gt;無監督方法: 檢測一般異常。多為基於 GAN 的做法，但是這些方法需要有關於異常種類的強大先驗知識和假設才能使增強有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;攝影影像-vs-放射成像&#34;&gt;
    &lt;a href=&#34;#%e6%94%9d%e5%bd%b1%e5%bd%b1%e5%83%8f-vs-%e6%94%be%e5%b0%84%e6%88%90%e5%83%8f&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    攝影影像 vs 放射成像
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;放射成像協議產生具有一致解剖模式的影像，由於微妙的成像線索和重疊的解剖結構，檢測起來更具挑戰性。&lt;/li&gt;
&lt;li&gt;作者提出了一種新穎的方法，可以明確地利用放射線照相影像的屬性，顯著提高放射線照相影像異常檢測的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;memory-networks&#34;&gt;
    &lt;a href=&#34;#memory-networks&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Memory networks
&lt;/h2&gt;&lt;p&gt;過往研究證明，在神經網路中納入記憶模組是有效的。然而現有方法需要不少額外記憶體。&lt;/p&gt;
&lt;p&gt;在本文中，作者克服了記憶體矩陣的局限性，並提出了一種有效且高效的&lt;strong&gt;memory queue&lt;/strong&gt;，用於放射線照相影像中的無監督異常檢測。&lt;/p&gt;
&lt;h1 id=&#34;3-squid&#34;&gt;
    &lt;a href=&#34;#3-squid&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    3. SQUID
&lt;/h1&gt;&lt;h2 id=&#34;31-overview&#34;&gt;
    &lt;a href=&#34;#31-overview&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    3.1. Overview
&lt;/h2&gt;&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/fig1.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/fig1.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&#34;feature-extraction&#34;&gt;
    &lt;a href=&#34;#feature-extraction&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Feature extraction
&lt;/h3&gt;&lt;p&gt;將輸入影像分割成 NxN 個不重疊區塊，將他們輸入 encoder 做特徵提取，這些提取出的特徵用於影像重建。&lt;/p&gt;
&lt;p&gt;而這個 encoder 可以是任何骨幹架構，簡單起見，此處用的是基本的捲積和池化層。&lt;/p&gt;
&lt;h3 id=&#34;image-reconstruction&#34;&gt;
    &lt;a href=&#34;#image-reconstruction&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Image reconstruction
&lt;/h3&gt;&lt;p&gt;引入【teacher and student generators】重建原始影像。隨著重建，解剖模式(anatomical patterns)的字典將作為 &lt;strong&gt;Memory Queue&lt;/strong&gt; 動態建立和更新。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Teacher generators: 使用前面 encoder(auto-encoder) 提取出的特徵直接重建影像。充當正規化器，防止學生不斷生成相同的正常影像。&lt;/li&gt;
&lt;li&gt;Student generators: 則是使用後面會提到的 &lt;strong&gt;in-painting block&lt;/strong&gt; 增強方法所獲得的特徵。Student generators 目標是根據增強的特徵重建出影像，用於異常辨識。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;teacher and student generators 使用知識蒸餾在 up-smapling 層級上進行耦合。&lt;/p&gt;
&lt;h3 id=&#34;anomaly-discrimination&#34;&gt;
    &lt;a href=&#34;#anomaly-discrimination&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Anomaly discrimination
&lt;/h3&gt;&lt;p&gt;作者採用 discriminator 評估產生的影像是真 or 假。且只有 &lt;strong&gt;Student generators&lt;/strong&gt; 才會收到從鑑別器導出的梯度(只用來更新Student generators)。兩個生成器和鑑別器相互競爭，直到收斂到平衡。&lt;/p&gt;
&lt;p&gt;經過訓練後，&lt;strong&gt;鑑別器可用於偵測測試影像中的異常&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;32-inventing-memory-queue-as-dictionary&#34;&gt;
    &lt;a href=&#34;#32-inventing-memory-queue-as-dictionary&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    3.2. Inventing Memory Queue as Dictionary
&lt;/h2&gt;&lt;h3 id=&#34;motivation&#34;&gt;
    &lt;a href=&#34;#motivation&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Motivation
&lt;/h3&gt;&lt;p&gt;為了打造「正常」外觀，透過對相似的 pattern 進行加權平均來對特徵做增強。然而，這種增強應用於從整個影像中提取的特徵，會丟棄影像中的空間資訊。因此，當前形式的 Memory Matrix(記憶矩陣) 無法感知放射影像中的解剖一致性。&lt;/p&gt;
&lt;h3 id=&#34;space-aware-memory&#34;&gt;
    &lt;a href=&#34;#space-aware-memory&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Space-aware memory
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;為了&lt;strong&gt;獲取空間資訊&lt;/strong&gt;，將分割的 patches 而不是整個影像傳遞到模型中。&lt;/li&gt;
&lt;li&gt;特定位置的 patch 只能存取整個 Memory Matrix 中的對應段，以此建立特定關係。稱為【&lt;strong&gt;Space-aware memory&lt;/strong&gt;】。&lt;/li&gt;
&lt;li&gt;可加快增強速度，因為它不再透過整個 Memory Matrix 來組裝類似的特徵。
&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/fig2.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/fig2.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;memory-queue&#34;&gt;
    &lt;a href=&#34;#memory-queue&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Memory queue
&lt;/h3&gt;&lt;p&gt;在 learning-based Memory Matrix，normal patterns 是結合 matrix basis 形成的，但這種組合和實際影像特徵之間總是存在分佈差異，使後續影像生成變得困難。&lt;/p&gt;
&lt;p&gt;作者提出 Memory queue 在模型訓練期間&lt;strong&gt;儲存真實影像特徵&lt;/strong&gt;，從而呈現與影像特徵相同的分佈，他在訓練期間直接將先前看到的特徵複製到 queue 中。訓練後，Memory queue 可當作正常解剖 pattern 的字典。&lt;/p&gt;
&lt;h3 id=&#34;gumbel-shrinkage&#34;&gt;
    &lt;a href=&#34;#gumbel-shrinkage&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Gumbel shrinkage
&lt;/h3&gt;&lt;p&gt;控制 Memory matrix 中 activated patterns 的數量有利於異常檢測。然而，設定 hard shrinkage threshold 無法處理記憶體中找不到合適 entries(條目)的情況。&lt;/p&gt;
&lt;p&gt;一種自然的解法是將梯度流過記憶體中的 top-k 個相似 pattern。然而，其餘未啟動的條目無法接收任何梯度並按預期進行更新。因此提出了 Gumbel shrinkage schema:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$w&amp;rsquo; = sg(hs(w; topk(w))-ϕ(w))+ϕ(w)$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;w 代表影像 feature 和 entry 間的相似度&lt;/li&gt;
&lt;li&gt;sg(⋅) 代表 stop-gradient，不計算輸入的梯度&lt;/li&gt;
&lt;li&gt;hs(⋅,t) 代表閾值 t 的 hard shrinkage&lt;/li&gt;
&lt;li&gt;ϕ(⋅) 代表 softmax&lt;/li&gt;
&lt;li&gt;這樣確保  memory 中 top-k 個相似 entries 的組合 ，又用 softmax 對所有 entry 進行更新&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者將其應用於框架中的 memory queue 和 memory matrix。&lt;/p&gt;
&lt;h2 id=&#34;33-formulating-anomaly-detection-as-inpainting&#34;&gt;
    &lt;a href=&#34;#33-formulating-anomaly-detection-as-inpainting&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    3.3. Formulating Anomaly Detection as Inpainting
&lt;/h2&gt;&lt;h3 id=&#34;motivation-1&#34;&gt;
    &lt;a href=&#34;#motivation-1&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Motivation
&lt;/h3&gt;&lt;p&gt;Image in-painting(影像修復) 最初是為了恢復具有鄰近上下文的損壞的影像區域而被提出。因此，作者將異常射線照相圖案修復到健康射線照相圖案中來實現異常檢測。&lt;/p&gt;
&lt;p&gt;修復的影像區域通常被認為與 boundary artifacts(邊界偽影)相關，當進行像素級修復任務時，不良偽影會導致大量誤報。因此作者&lt;strong&gt;在特徵層級實現了修復任務&lt;/strong&gt;。潛在特徵對像素級雜訊、旋轉和平移具有更好的不變性，因此更適合後續的異常檢測。&lt;/p&gt;
&lt;h3 id=&#34;in-painting-block&#34;&gt;
    &lt;a href=&#34;#in-painting-block&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    In-painting block
&lt;/h3&gt;&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/fig3.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/fig3.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;作者將 Memory Queue 整合到一個新穎的 in-painting block 中以執行特徵空間修復，修復三步驟如圖。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;【Fig(a)】 : 在 queue 中增強 $w×h$ 個非重疊 patch 特徵 $F_{{(1,1),&amp;hellip;,(w, h)}}$ 到最相似的 normal patterns $N_{{(1,1),&amp;hellip;,(w, h)}}$。&lt;/li&gt;
&lt;li&gt;【Fig(b)】 : 由於 $N$ 是由從先前的訓練資料中提取的特徵組成，因此 $N$ 不受當前輸入影像的影響。為了回顧輸入影像的特徵，我們使用 transformer block 來聚合 patch 特徵 $F$ 及其增強特徵 $N$。
&lt;ul&gt;
&lt;li&gt;對於每個 patch $F_{i,j}$，其相鄰的八個增強區塊 $N_{(i-1,j-1),&amp;hellip;,(i+1,j+1)}$ 被用做細化(refine) $F_{i,j}$ 的條件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Transformer block 的 query token 被展平為 $F_{i,j}∈R^{1×*}$ ； 而 key/value tokens 則展平為 $N_{(i-1,j-1),&amp;hellip;,(i+1,j+1)}∈R^{8×*}$。&lt;/p&gt;
&lt;p&gt;在 in-painting block 的開始和結束處，作者用了一對額外的 point-wise convolutions（1×1 卷積核）。&lt;/p&gt;
&lt;h3 id=&#34;masked-shortcut&#34;&gt;
    &lt;a href=&#34;#masked-shortcut&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Masked shortcut
&lt;/h3&gt;&lt;p&gt;作者在 in-painting block 中使用，以此&lt;strong&gt;更好地聚合特徵並簡化最佳化&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;作者實證表明，direct residual connection（直接殘差連接）會降低 in-painting block 的有效性，因此在訓練期間利用　random binary mask　來門控快捷特徵【Fig(b)】。給定輸入 patch 特徵 $F$，in-painting block 的輸出透過以下方式獲得：&lt;/p&gt;
&lt;p&gt;$F&amp;rsquo;=(1-δ)⋅F+δ⋅inpaint(F)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inpaint(·): 設計的 in-painting block&lt;/li&gt;
&lt;li&gt;δ ~ Bernoulli(ρ): 具有閘控機率(gating probability)的二元變數&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在每個訓練步獲得 $F&amp;rsquo;$ 後，原始的 $F$ 被複製來更新記憶體【Fig(c)】。在推理過程中，完全 shortcut，以便 $F&amp;rsquo; = inpaint(F)$ 進行確定性預測。&lt;/p&gt;
&lt;h2 id=&#34;34-anomaly-discrimination&#34;&gt;
    &lt;a href=&#34;#34-anomaly-discrimination&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    3.4 Anomaly Discrimination
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;鑑別器評估重建影像，若判定不現實表示發生異常。&lt;/li&gt;
&lt;li&gt;因生成器以正常影像上進行訓練，memory queue 僅儲存 normal pattern。因此在推理中，abnormal pattern 重建的影像預計會顯得不真實。&lt;/li&gt;
&lt;li&gt;小結
&lt;ul&gt;
&lt;li&gt;in-painting block 專注在將任何 patch(正常或異常) 特徵增強為類似的“正常”特徵。&lt;/li&gt;
&lt;li&gt;student generator 據“正常”特徵重建“正常”圖像&lt;/li&gt;
&lt;li&gt;teacher generator 用於防止學生無論輸入如何都產生相同的圖像。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;沒異常的話，input 和 teacher generator 重建的圖像在語意上應該相差很小。因此，我們委託優化的鑑別器網路來感知異常警報，異常分數計算如下。&lt;/p&gt;
&lt;p&gt;$A=ϕ(\frac{D(G_{s}(E(I)))-μ}{σ})$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E: encoder&lt;/li&gt;
&lt;li&gt;$G_t$: teacher generator&lt;/li&gt;
&lt;li&gt;$G_s$: student generator&lt;/li&gt;
&lt;li&gt;D: discriminator&lt;/li&gt;
&lt;li&gt;A: 異常分數&lt;/li&gt;
&lt;li&gt;ϕ(⋅): sigmoid function&lt;/li&gt;
&lt;li&gt;μ 和 σ 是根據 training samples 算出的異常分數的平均值和標準差&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;35-loss-function&#34;&gt;
    &lt;a href=&#34;#35-loss-function&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    3.5. Loss Function
&lt;/h2&gt;&lt;p&gt;共有五種，自己看論文 :D&lt;/p&gt;
&lt;h1 id=&#34;4-experiments&#34;&gt;
    &lt;a href=&#34;#4-experiments&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    4. Experiments
&lt;/h1&gt;&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/table1.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/table1.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&#34;41-new-benchmark&#34;&gt;
    &lt;a href=&#34;#41-new-benchmark&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    4.1. New Benchmark
&lt;/h2&gt;&lt;h3 id=&#34;digitanatomy數位解剖學&#34;&gt;
    &lt;a href=&#34;#digitanatomy%e6%95%b8%e4%bd%8d%e8%a7%a3%e5%89%96%e5%ad%b8&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    DigitAnatomy(數位解剖學)
&lt;/h3&gt;&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/fig4.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/fig4.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;作者創建了一個合成資料集，圖片中有數字 1~9，數字順序正確被視為「正常」；否則異常。異常包括缺失、亂序、翻轉和 zero digit。&lt;/p&gt;
&lt;p&gt;該資料集對於放射線成像尤其有利&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模擬其兩個獨特屬性，即空間相關性和一致形狀。&lt;/li&gt;
&lt;li&gt;無需生物專業知識，更容易進行問題調試。&lt;/li&gt;
&lt;li&gt;容易獲得模擬異常的 ground truth。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;42-public-benchmarks&#34;&gt;
    &lt;a href=&#34;#42-public-benchmarks&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    4.2. Public Benchmarks
&lt;/h2&gt;&lt;p&gt;ZhangLab Chest X-ray&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含健康和肺炎（作為異常）影像&lt;/li&gt;
&lt;li&gt;訓練集
&lt;ul&gt;
&lt;li&gt;1349 張正常&lt;/li&gt;
&lt;li&gt;3883 張異常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;測試集
&lt;ul&gt;
&lt;li&gt;234 張正常&lt;/li&gt;
&lt;li&gt;390 張異常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作者從訓練集中隨機選 200 張影像（100 張正常和 100 張異常影像）作為超參數調整的驗證集。&lt;/li&gt;
&lt;li&gt;所有影像的大小調整為 128x128。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stanford CheXpert&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;對 front-view PA 影像進行評估，共有 12 種異常&lt;/li&gt;
&lt;li&gt;訓練集
&lt;ul&gt;
&lt;li&gt;5249 張正常&lt;/li&gt;
&lt;li&gt;23671 張異常&lt;/li&gt;
&lt;li&gt;使用和 ZhangLab 相同的超參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;測試集
&lt;ul&gt;
&lt;li&gt;用訓練集的 250 張正常和 250 張異常進行測試&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;43-baselines-and-metrics&#34;&gt;
    &lt;a href=&#34;#43-baselines-and-metrics&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    4.3. Baselines and Metrics
&lt;/h2&gt;&lt;p&gt;13 個 baseline&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;經典 UAD(unsupervised anomaly detection) 方法
&lt;ul&gt;
&lt;li&gt;Auto-Encoder, VAE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;醫學影像的 SOTA
&lt;ul&gt;
&lt;li&gt;Ganomaly、f-AnoGAN、IF、SALAD、&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最新的 UAD 方法
&lt;ul&gt;
&lt;li&gt;emAE、CutPaste、M-KD、PANDA、PaDiM、IGD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;標準指標評&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Receiver Operating Characteristic (ROC) curve&lt;/li&gt;
&lt;li&gt;ROC 曲線下面積 (AUC)、&lt;/li&gt;
&lt;li&gt;準確度 (Acc)&lt;/li&gt;
&lt;li&gt;F1 分數 (F1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除非有特別註明，不然都是從頭獨立訓練模型至少三次&lt;/p&gt;
&lt;h1 id=&#34;5-results&#34;&gt;
    &lt;a href=&#34;#5-results&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    5. Results
&lt;/h1&gt;&lt;h2 id=&#34;51-interpreting-squid-on-digitanatomy&#34;&gt;
    &lt;a href=&#34;#51-interpreting-squid-on-digitanatomy&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    5.1. Interpreting SQUID on DigitAnatomy
&lt;/h2&gt;&lt;p&gt;承前面數字圖可見，SQUID 重建的圖像比其他方法更有意義和指示性。這主要歸因於 Space-aware memory，由此產生的字典與獨特的模式及其空間訊息相關聯。&lt;/p&gt;
&lt;p&gt;一旦出現異常（例如丟失數字），in-painting block 將透過從字典中組裝前 top-k 個最相似的 pattern 來將異常特徵增強到其正常對應特徵。&lt;/p&gt;
&lt;p&gt;GAN 傾向於重建訓練樣本平均得到的影像。MemAE 由於其 memory matrix 而表現相對較好，但對於缺失數字的異常效果不佳，在極端異常攻擊上完全失敗。&lt;/p&gt;
&lt;h2 id=&#34;52-benchmarking-squid-on-chest-radiography&#34;&gt;
    &lt;a href=&#34;#52-benchmarking-squid-on-chest-radiography&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    5.2. Benchmarking SQUID on Chest Radiography
&lt;/h2&gt;&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/fig5.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/fig5.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;圖中視覺化了 SQUID 在正常和異常影像上的重建結果。正常情況下，SQUID可以很容易地在 Memory Queue 中找到相似的匹配，順利實現重建；對於異常情況，將偽造的正常 pattern 強加到異常特徵中就會產生矛盾。這樣，生成的圖像將與輸入顯著不同，然後由鑑別器捕獲。&lt;/p&gt;
&lt;h3 id=&#34;limitation&#34;&gt;
    &lt;a href=&#34;#limitation&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Limitation
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;目前形式的 SQUID 無法在像素層級精確定位異常。&lt;/li&gt;
&lt;li&gt;因為 SQUID 是一種無監督方法，需要對正常/異常影像進行零手動註釋。&lt;/li&gt;
&lt;li&gt;那些像素級別的異常檢測會遭遇放大雜訊的影響，但是由於 SQUID 是在特徵層級進行的，比像素級別更加 robust。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;53-ablating消融-key-properties-in-squid&#34;&gt;
    &lt;a href=&#34;#53-ablating%e6%b6%88%e8%9e%8d-key-properties-in-squid&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    5.3. Ablating(消融) Key Properties in SQUID
&lt;/h2&gt;&lt;h3 id=&#34;component-study&#34;&gt;
    &lt;a href=&#34;#component-study&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Component study
&lt;/h3&gt;&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/table2.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/table2.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&#34;hyper-parameter-robustness&#34;&gt;
    &lt;a href=&#34;#hyper-parameter-robustness&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Hyper-parameter robustness
&lt;/h3&gt;&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/fig6.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/fig6.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&#34;disease-free-training-requirement&#34;&gt;
    &lt;a href=&#34;#disease-free-training-requirement&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Disease-free training requirement?
&lt;/h3&gt;&lt;p&gt;&lt;div class=&#34;post-img-view&#34;&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/fig7.png&#34;&gt;
            &lt;img src=&#34;https://charlieUWUuwu.github.io/img/paper/SQUID/fig7.png&#34; loading=&#34;lazy&#34; alt=&#34;image&#34;  /&gt;
        &lt;/a&gt;
    &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;用於醫學異常檢測的無監督方法並不常見，因為所謂的 UAD 方法不是「無監督的」—— 它們必須僅在無疾病影像上進行訓練。&lt;/p&gt;
&lt;p&gt;在實踐中，要獲得健康圖片需要人工標註。&lt;/p&gt;
&lt;p&gt;在訓練集中考慮 disease-free 從 100% - 50% 的情況，把 SQUID 的 robust 和另外三個 baseline 進行比較。&lt;/p&gt;
&lt;p&gt;從圖中可知，SQUID 的 memory queue 可以自動忽略來自少數的 anatomical patterns，容忍高達 50% 的疾病/健康訓練比率。&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;提出 SQUID，用於從放射線影像中進行無監督異常檢測&lt;/li&gt;
&lt;li&gt;SQUID 可以將根深蒂固的解剖結構分類為 recurrent pattern(固定重複出現的 pattern)&lt;/li&gt;
&lt;li&gt;在推理中，SQUID可以準確地識別異常情況&lt;/li&gt;
&lt;li&gt;SQUID 在ZhangLab 資料集上優於主流方法超過 5 點 AUC，在史丹佛 CheXpert 資料集上優於主流方法 10 點 AUC&lt;/li&gt;
&lt;li&gt;合成了 DigitAnatomy 資料集，以類似於放射線照相影像中胸部解剖結構的關鍵屬性&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
